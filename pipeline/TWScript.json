{
	"name": "TWScript",
	"properties": {
		"activities": [
			{
				"name": "Copy data1",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ExcelSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"tableOption": "autoCreate",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ExcelTruck",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "AzureSqlTruck",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Script1",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Copy data1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "DECLARE @cols AS NVARCHAR(MAX),\n        @query  AS NVARCHAR(MAX);\n\n-- Generate the list of distinct \"Codigo\" values to use as pivoted columns\nSET @cols = STUFF((SELECT DISTINCT ',' + QUOTENAME(Codigo) \n                   FROM dbo.truckscript\n                   FOR XML PATH(''), TYPE\n                   ).value('.', 'NVARCHAR(MAX)'), 1, 1, '');\n\n-- Build the dynamic query for pivoting \"Codigo\" for each month\nSET @query = '\n    SELECT Division, Sociedad, Pais, [Planta / Almacén], Grupo, Descripción, \n           ' + @cols + '\n    FROM (\n        SELECT Division, Sociedad, Pais, [Planta / Almacén], Grupo, Descripción, Codigo,\n               ISNULL(Enero, 0) AS Enero, ISNULL(Febrero, 0) AS Febrero, ISNULL(Marzo, 0) AS Marzo, \n               ISNULL(Abril, 0) AS Abril, ISNULL(Mayo, 0) AS Mayo, ISNULL(Junio, 0) AS Junio,\n               ISNULL(Julio, 0) AS Julio, ISNULL(Agosto, 0) AS Agosto, ISNULL(Septiembre, 0) AS Septiembre,\n               ISNULL(Octubre, 0) AS Octubre, ISNULL(Noviembre, 0) AS Noviembre, ISNULL(Dicembre, 0) AS Dicembre\n        FROM dbo.truckscript\n    ) AS SourceTable\n    PIVOT (\n        MAX(Enero) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Enero\n    PIVOT (\n        MAX(Febrero) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Febrero\n    PIVOT (\n        MAX(Marzo) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Marzo\n    PIVOT (\n        MAX(Abril) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Abril\n    PIVOT (\n        MAX(Mayo) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Mayo\n    PIVOT (\n        MAX(Junio) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Junio\n    PIVOT (\n        MAX(Julio) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Julio\n    PIVOT (\n        MAX(Agosto) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Agosto\n    PIVOT (\n        MAX(Septiembre) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Septiembre\n    PIVOT (\n        MAX(Octubre) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Octubre\n    PIVOT (\n        MAX(Noviembre) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Noviembre\n    PIVOT (\n        MAX(Dicembre) FOR Codigo IN (' + @cols + ')\n    ) AS PivotTable_Dicembre;\n';\n\n-- Execute the dynamic SQL query\nEXEC sp_executesql @query;"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"annotations": []
	}
}